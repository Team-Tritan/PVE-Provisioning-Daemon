#!/usr/bin/env bun

/**
 * Bundle configuration files into TypeScript constants for binary compilation
 */

import { readFileSync, writeFileSync, existsSync } from 'fs';
import { join } from 'path';

function embedConfigFiles() {
  const configDir = 'config';
  const outputFile = 'src/config/embeddedConfigs.ts';
  
  try {
    const templatesYaml = readFileSync(join(configDir, 'templates.yaml'), 'utf-8');
    
    let envExample = '';
    if (existsSync('.env.example')) {
      envExample = readFileSync('.env.example', 'utf-8');
    }
    
    const tsContent = `// Auto-generated file - DO NOT EDIT MANUALLY
// Generated by scripts/embed-configs.ts

export const EMBEDDED_CONFIGS = {
  templates: \`${templatesYaml.replace(/`/g, '\\`').replace(/\$/g, '\\$')}\`,
  envExample: \`${envExample.replace(/`/g, '\\`').replace(/\$/g, '\\$')}\`,
} as const;

export const CONFIG_FILES = {
  'templates.yaml': EMBEDDED_CONFIGS.templates,
  '.env.example': EMBEDDED_CONFIGS.envExample,
} as const;

/**
 * Check if running from binary (no config directory available)
 */
export function isRunningFromBinary(): boolean {
  const fs = require('fs');
  const path = require('path');
  return !fs.existsSync(path.join(process.cwd(), 'config', 'templates.yaml'));
}
`;

    writeFileSync(outputFile, tsContent);
    console.log('✅ Embedded configuration files into:', outputFile);
    console.log('   - templates.yaml');
    if (envExample) {
      console.log('   - .env.example');
    }
    
  } catch (error) {
    console.error('❌ Failed to embed config files:', error);
    process.exit(1);
  }
}

embedConfigFiles();
